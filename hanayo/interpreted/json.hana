record JSON

    true = Record()
    false = Record()

    function parse(str) begin
        slen = str.length()
        r = record // this one
            // def this one then
        end
        r.i = 0
        ws = function() begin
            while r.i < slen and (str[r.i] == ' ' or str[r.i] == '\t') begin
                r.i += 1
            end
        end
        next = function(ch) begin
            if r.i < slen and str[r.i] == ch begin
                r.i += 1
                return
            end
            raise JSON::ParserError("Expected " + ch + ", got " + str[r.i])
        end
        r.parse_number = function() begin
            num = ""
            while r.i < slen and str[r.i] >= "0" and str[r.i] <= "9" begin
                num += str[r.i]
                r.i += 1
            end
            if str[r.i] == "." begin
                num += "."
                r.i += 1
                while r.i < slen and str[r.i] >= "0" and str[r.i] <= "9" begin
                    num += str[r.i]
                    r.i += 1
                end
                return Float(num)
            end
            else return Int(num)
        end
        r.parse_str = function() begin
            next('"')
            ss = ""
            while r.i < slen begin
                if str[r.i] == '"' begin
                    r.i += 1
                    return ss
                end
                else begin
                    ss += str[r.i]
                    r.i += 1
                end
            end
        end
        r.parse_word = function() begin
            c = str[r.i]
            if c == "t" begin
                next("t")
                next("r")
                next("u")
                next("e")
                return JSON::true
            end
            else if c == "f" begin
                next("f")
                next("a")
                next("l")
                next("s")
                next("e")
                return JSON::false
            end
            else if c == "n" begin
                next("n")
                next("u")
                next("l")
                next("l")
                return nil
            end
            print("expected word")
        end
        r.parse_value = function() begin
            ws()
            if str[r.i] == "{" return r::parse_object()
            else if str[r.i] == "[" return r::parse_array()
            else if str[r.i] == '"' return r::parse_str()
            else if str[r.i] >= "0" and str[r.i] <= "9" return r::parse_number()
            else return r::parse_word()
        end
        r.parse_array = function() begin
            key = ""
            L = []
            next("[")
            ws()
            if str[r.i] == "]" return obj
            while r.i < slen begin
                L.push(r::parse_value())
                ws()
                if r.i < slen and str[r.i] == "]" begin
                    r.i += 1
                    return L
                end
                next(",")
                ws()
            end
        end
        r.parse_object = function() begin
            key = ""
            obj = Record() // maybe this one
            r.i += 1 // "{"
            ws()
            if str[r.i] == "}" return obj
            while r.i < slen begin
                key = r::parse_str()
                ws()
                next(":")
                ws()
                value = r::parse_value()
                obj[key] = value
                ws()
                if r.i < slen and str[r.i] == "}" begin
                    r.i += 1
                    return obj
                end
                next(",")
                ws()
            end
        end
        return r::parse_object()
    end

    function stringify(obj) begin
        prototype = obj.prototype
        if Record::is_record?(obj) begin
            // dictionaries
            keys = Record::keys(obj)
            klen = keys.length() - 1
            s = "{"
            function print_key(i) begin
                s = keys[i]
                kv = JSON::stringify(s)
                kv += ": "
                kv += JSON::stringify(obj[s])
                return kv
            end
            if klen >= 0 begin
                s += print_key(0)
                if klen >= 1 for i=1 to klen s += ", " + print_key(i)
            end
            s += "}"
            return s
        end
        else if prototype == Array begin
            s = "["
            s += obj.map(JSON::stringify).join(", ")
            s += "]"
            return s
        end
        else if prototype == String begin
            s = "\""
            slen = obj.length() - 1
            for i = 0 to slen begin
                if obj[i] == "\n" s += "\\n"
                else if obj[i] == "\"" s += "\\\""
                else s += obj[i]
            end
            s += "\""
            return s
        end
        else if prototype == Int or prototype == Float begin
            return String(obj)
        end
        raise SerialiserError("Unknown type!")
    end

    // error
    record ParserError
        function constructor(self, what?) begin
            self.what? = what?
            return self
        end
    end

    record SerialiserError
        function constructor(self, what?) begin
            self.what? = what?
            return self
        end
    end

end
