record File

    // native defs
    SEEK_SET = 0
    SEEK_CUR = 1
    SEEK_END = 2
    PATH_MAX = 4096

    _fopen = Cffi::Function("fopen", [Cffi.String, Cffi.String], Cffi.Pointer)
    _fwrite = Cffi::Function("fwrite", [Cffi.String, Cffi.UInt64, Cffi.UInt64, Cffi.Pointer], Cffi.UInt64)
    _fread = Cffi::Function("fread", [Cffi.String, Cffi.UInt64, Cffi.UInt64, Cffi.Pointer], Cffi.UInt64)
    _fclose = Cffi::Function("fclose", [Cffi.Pointer], Cffi.Void)
    _fseek = Cffi::Function("fseek", [Cffi.Pointer, Cffi.UInt64, Cffi.Int64], Cffi.Int64)
    _ftell = Cffi::Function("ftell", [Cffi.Pointer], Cffi.UInt64)
    _feof = Cffi::Function("feof", [Cffi.Pointer], Cffi.Int64)
    _ferror = Cffi::Function("ferror", [Cffi.Pointer], Cffi.Int64)
    _realpath = Cffi::Function("realpath", [Cffi.String, Cffi.String], Cffi.Pointer)

    // constructor
    function constructor(self, path, mode) begin
        self.path = path
        self.mode = mode
        self._fptr = Cffi::RcPointer(Cffi::call(File._fopen, path, mode), File._fclose)
        return self
    end

    // read
    function read(self, n) begin
        read = String::reserve(n)
        s = Cffi::call(File._fread, read, 1, n, self._fptr.pointer!)
        read.shrink!(s)
        return read
    end
    function readall(self) begin
        sz = self.size()
        read = String::reserve(sz)
        s = Cffi::call(File._fread, read, 1, sz, self._fptr.pointer!)
        read.shrink!(s)
        return read
    end
    function readline(self) begin
        line = ""
        chr = ""
        while not self.eof?() and (chr = self.read(1)) != "\n" begin
            line += chr
        end
        return line
    end

    // write
    function write(self, str) begin
        return Cffi::call(File._fwrite, str, 1, str.bytesize(), self._fptr.pointer!)
    end

    // reopen
    function reopen(self, mode) begin
        self.mode = mode
        self._fptr = Cffi::RcPointer(Cffi::call(File._fopen, self.path, mode), File._fclose)
        return self
    end

    // seek
    function seek(self, offset, whence) begin
        return Cffi::call(File._fseek, self._fptr.pointer!, offset, whence)
    end
    function tell(self) begin
        return Cffi::call(File._ftell, self._fptr.pointer!)
    end

    function size(self) begin
        prev = self.tell()
        self.seek(0, File.SEEK_END)
        sz = self.tell()
        self.seek(prev, File.SEEK_SET)
        return sz
    end

    // states
    function eof?(self) begin
        return Cffi::call(File._feof, self._fptr.pointer!)
    end
    function error?(self) begin
        return Cffi::call(File._ferror, self._fptr.pointer!)
    end

    // static
    function realpath(path) begin
        actualpath = String::reserve(File.PATH_MAX)
        ptr = Cffi::call(File._realpath, path, actualpath)
        if ptr == 0 return ""
        actualpath.shrink!()
        return actualpath
    end

end
