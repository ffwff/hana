record JSON

    function parse(str) begin
        chars = str.chars()
        slen = chars.length()
        r = Record()
        r.i = 0
        ws = function() begin
            while r.i < slen and (chars[r.i] == ' ' or chars[r.i] == '\t') begin
                r.i += 1
            end
        end
        next = function(ch) begin
            if r.i < slen and chars[r.i] == ch begin
                r.i += 1
                return
            end
            raise JSON.ParserError("Expected " + ch + ", got " + chars[r.i])
        end
        r.parse_number = function(r) begin
            num = ""
            while chars[r.i] >= "0" and chars[r.i] <= "9" begin
                num += chars[r.i]
                r.i += 1
                if r.i == slen then return Int(num)
            end
            if chars[r.i] == "." begin
                num += "."
                r.i += 1
                while chars[r.i] >= "0" and chars[r.i] <= "9" begin
                    num += chars[r.i]
                    r.i += 1
                    if r.i == slen then return Float(num)
                end
            end
            else return Int(num)
        end
        r.parse_str = function(r) begin
            next('"')
            ss = ""
            while r.i < slen begin
                if chars[r.i] == '"' begin
                    r.i += 1
                    return ss
                end
                else begin
                    ss += chars[r.i]
                    r.i += 1
                end
            end
        end
        r.parse_word = function(r) begin
            c = chars[r.i]
            if c == "t" begin
                next("t")
                next("r")
                next("u")
                next("e")
                return JSON.true
            end
            else if c == "f" begin
                next("f")
                next("a")
                next("l")
                next("s")
                next("e")
                return JSON.false
            end
            else if c == "n" begin
                next("n")
                next("u")
                next("l")
                next("l")
                return nil
            end
            print("expected word")
        end
        r.parse_value = function(r) begin
            ws()
            if chars[r.i] == "{"      then return r.parse_object()
            else if chars[r.i] == "[" then return r.parse_array()
            else if chars[r.i] == '"' then return r.parse_str()
            else if chars[r.i] >= "0" and chars[r.i] <= "9" then return r.parse_number()
            else return r.parse_word()
        end
        r.parse_array = function(r) begin
            key = ""
            L = []
            next("[")
            ws()
            if chars[r.i] == "]" then return obj
            while r.i < slen begin
                L.push(r.parse_value())
                ws()
                if r.i < slen and chars[r.i] == "]" begin
                    r.i += 1
                    return L
                end
                next(",")
                ws()
            end
        end
        r.parse_object = function(r) begin
            key = ""
            obj = Record()
            r.i += 1
            print("1")
            ws()
            if chars[r.i] == "}" then return obj
            while r.i < slen begin
                key = r.parse_str()
                ws()
                next(":")
                ws()
                value = r.parse_value()
                obj[key] = value
                ws()
                if r.i < slen and chars[r.i] == "}" begin
                    r.i += 1
                    return obj
                end
                next(",")
                ws()
            end
        end
        return r.parse_value()
    end

end

// serialising
Record.to_json = function(self) begin
    s = "{"
    s += self.iter().map(|v| {
        key = v[0]
        value = v[1]
        return key.to_json() + ":" + value.to_json()
    }).join(", ")
    s += "}"
    return s
end

Array.to_json = function(self) begin
    return "[" + self.map(|v| {
        return v.to_json()
    }).join(", ") + "]"
end

String.to_json = function(self) begin
    return '"' + self.chars().map(|v| {
        if v == '"' then return '\\"'
        else return v
    }).join('') + '"'
end

Int.to_json = function(self) begin
    return String(self)
end
Float.to_json = Int.to_json

print(JSON::parse("123.1"))